/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.aonyi.torneo.ui;

import com.aonyi.torneo.control.*;
import com.aonyi.torneo.modelo.*;
import com.aonyi.torneo.utils.CompetenciaTableModel;
import com.aonyi.torneo.utils.TorneoLogger;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;

/**
 *
 * @author faguirre
 */
public class FrmRegistrarInscripciones extends javax.swing.JFrame {
    
    /**
     * Controlador
     */
    private final GestorInscripcion gestor;
    /**
     * Almacena la selección temporal de competencias
     */
    private Map<Aspirante,TableModel> tableModels = new HashMap();
    /**
     * Almacena la selección temporal de la categoría
     */
    private Map<Aspirante,Categoria> categoriaAspirante = new HashMap();

    /**
     * Creates new form NewJFrame
     * @param gestorInscripcion
     */
    public FrmRegistrarInscripciones(GestorInscripcion gestorInscripcion) {
        initComponents();
        this.gestor = gestorInscripcion;
        // Carga la ventana con los datos persistidos
        
        // CU. Registrar inscripción de aspirantes. 
        // 2. muestra un listado con las Escuelas registradas de la zona y solicita selección de una.
        this.cargaListaEscuelas();
        this.cargaListaCategorias();
        this.cargaTablaCompetencias(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstAspirantes = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        btnNuevoAspirante = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstEscuelas = new javax.swing.JList<Escuela>();
        jPanel6 = new javax.swing.JPanel();
        btnAceptar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstCategorias = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCompetencias = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registrar Aspirantes");
        setMinimumSize(new java.awt.Dimension(800, 450));
        setPreferredSize(new java.awt.Dimension(800, 450));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Aspirante"));
        jPanel4.setPreferredSize(new java.awt.Dimension(300, 200));
        jPanel4.setLayout(new java.awt.BorderLayout());

        lstAspirantes.setPreferredSize(new java.awt.Dimension(37, 130));
        lstAspirantes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstAspirantesValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(lstAspirantes);

        jPanel4.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jPanel3.setPreferredSize(new java.awt.Dimension(304, 35));
        jPanel3.setLayout(new java.awt.BorderLayout());

        btnNuevoAspirante.setText("Nuevo aspirante");
        btnNuevoAspirante.setPreferredSize(new java.awt.Dimension(130, 32));
        btnNuevoAspirante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoAspiranteActionPerformed(evt);
            }
        });
        jPanel3.add(btnNuevoAspirante, java.awt.BorderLayout.EAST);

        jPanel4.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccione una Entidad Educativa"));
        jPanel5.setPreferredSize(new java.awt.Dimension(614, 130));
        jPanel5.setLayout(new java.awt.BorderLayout());

        lstEscuelas.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstEscuelasValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstEscuelas);

        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel5, java.awt.BorderLayout.PAGE_START);

        jPanel6.setPreferredSize(new java.awt.Dimension(614, 50));

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });
        jPanel6.add(btnAceptar);

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel6.add(btnCancelar);

        getContentPane().add(jPanel6, java.awt.BorderLayout.PAGE_END);

        jPanel7.setPreferredSize(new java.awt.Dimension(300, 50));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Categorías"));
        jPanel2.setPreferredSize(new java.awt.Dimension(100, 120));
        jPanel2.setLayout(new java.awt.BorderLayout());

        lstCategorias.setPreferredSize(new java.awt.Dimension(37, 40));
        jScrollPane3.setViewportView(lstCategorias);

        jPanel2.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel7.add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Competencias"));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 100));

        tblCompetencias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblCompetencias);

        jPanel7.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel7, java.awt.BorderLayout.LINE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /****************************************************************************
     * Sección de registro de Listener
     ***************************************************************************/
    private void btnNuevoAspiranteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoAspiranteActionPerformed
        this.nuevoAspirante();
    }//GEN-LAST:event_btnNuevoAspiranteActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        try{        
            this.registrarInscripciones();
            JOptionPane.showMessageDialog(this,"Se han almacenado correctamente los datos","Fin",JOptionPane.INFORMATION_MESSAGE);
            this.setVisible(false);
        } catch(Exception e){
            TorneoLogger.getLogger().log(Level.SEVERE, "Se produjo el siguiente error: {0}", e.getMessage() + " - " + Arrays.toString(e.getStackTrace()));
            JOptionPane.showMessageDialog(this,e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);              
        }
    }//GEN-LAST:event_btnAceptarActionPerformed
     
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        JOptionPane.showMessageDialog(this, "Seleccione una escuela", "Selección", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_formWindowOpened

    private void lstAspirantesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstAspirantesValueChanged
        if (!evt.getValueIsAdjusting() && ((JList)evt.getSource()).getSelectedIndex() != -1){
            JList list = (JList)evt.getSource();
            int iActual = list.getSelectedIndex();
            int iAnterior = iActual == evt.getFirstIndex() ? evt.getLastIndex() : evt.getFirstIndex();

            Aspirante anterior = this.lstAspirantes.getModel().getElementAt(iAnterior);
            Aspirante actual = this.lstAspirantes.getModel().getElementAt(iActual);
            
            this.actualizaTableModels(anterior, actual);
            this.actualizaSeleccionCategoria(anterior, actual);
        }
    }//GEN-LAST:event_lstAspirantesValueChanged

    private void lstEscuelasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstEscuelasValueChanged
        if (!evt.getValueIsAdjusting()){
            JList list = (JList)evt.getSource();
            int iActual = list.getSelectedIndex();
            int iAnterior = iActual == evt.getFirstIndex() ? evt.getLastIndex() : evt.getFirstIndex();

            Escuela anterior = this.lstEscuelas.getModel().getElementAt(iAnterior);
            Escuela actual = this.lstEscuelas.getModel().getElementAt(iActual);
            
            if (anterior.getAspirantes().size() > 0){
                JOptionPane.showMessageDialog(this, "Hay algunas inscripciones sin guardar");
            }
            
            this.nuevoAspirante();

        }
    }//GEN-LAST:event_lstEscuelasValueChanged

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed
    
    
    
    /****************************************************************************
     * Sección de carga inicial de Componentes de la Ventana.
     ***************************************************************************/
    /**
     * Carga el JList de Categorías
     */
    private void cargaListaCategorias(){
        TorneoLogger.getLogger().info("Carga lista de Categorías");
        DefaultListModel listModel = new DefaultListModel();
        for (Categoria c: this.gestor.getListaCategorias()){
            listModel.addElement(c);
        }
        this.lstCategorias.setModel(listModel);
    }
    
    /**
     * Carga la tabla de Competencias
     */
    private void cargaTablaCompetencias(){
        TorneoLogger.getLogger().info("Carga tabla de Competencias");
        // Recupera el Table Model ajustado a la estructura de la Competencia
        CompetenciaTableModel tableModel = new CompetenciaTableModel(this.gestor.getListaCompetencias());
        this.tblCompetencias.setModel(tableModel);   
                
        // Ajusta el ancho de la columna de selección
        this.tblCompetencias.getColumnModel().getColumn(0).setMaxWidth(50);        
    }
    
     /**
     * Carga el JList de Escuelas
     */
    private void cargaListaEscuelas(){
        TorneoLogger.getLogger().info("Carga la lista de Escuelas");
        DefaultListModel listModel = new DefaultListModel();
        for (Escuela e: this.gestor.getListaEscuelas()){
            listModel.addElement(e);
        }
        this.lstEscuelas.setModel(listModel);
    }
    
    /****************************************************************************
     * Sección de carga componentes en forma dinámica
     ***************************************************************************/
    
    /**
     * Recupera la categoría recomendada para el Aspirante y la deja seleccionada
     * en la lista de categorías
     * @param aspirante 
     */
    private Categoria recomiendaCategoriaAspirante(Aspirante aspirante) throws Exception{
        // Recupera la categoría que corresponde al aspirante seleccionado
        TorneoLogger.getLogger().log(Level.INFO,"Busca la categoría recomendada para {0}",aspirante);
        Categoria categoria = this.gestor.getCategoriaRecomendadaAspirante(aspirante);
        TorneoLogger.getLogger().log(Level.INFO,"Recuperó la categoría {0}",categoria);
        return categoria;
    }  
    
     
    /**
     * Carga la lista de aspirantes de una escuela seleccionada
     * @param escuela 
     */
    private void cargaListaAspiranteDeUnaEscuela(Escuela escuela){
        DefaultListModel listModel = new DefaultListModel();
        for(Aspirante a: escuela.getAspirantes()){
            listModel.addElement(a);
        }
        this.lstAspirantes.setModel(listModel);
    }
    /**
     * Crea un nuevo aspirante
     */
    private void nuevoAspirante(){
        try {                    
            // Obtiene la escuela seleccionada
            Escuela escuela = this.lstEscuelas.getSelectedValue();
            // Controla que haya una escuela seleccionada
            if (escuela == null) throw new Exception("Debe seleccionar una Escuela");     
            
            // Limpia las selecciones previas
            this.cargaTablaCompetencias();
            this.cargaListaCategorias();

            // Variable que indica si se desea agregar otro aspirante
            boolean isOtroAspirante = true;
            
            while (isOtroAspirante) {
                // Crea la ventana para carga del Aspirante 
                FrmNuevoAspirante vAspirante = new FrmNuevoAspirante(this,true);
                vAspirante.setVisible(true);

                // Obtiene los datos que retorna la ventana Nuevo Aspirante. 
                String[] retorno = vAspirante.getRetorno();

                // Ingresa solamente si recibe el array de String con los valores del Aspirante
                // de la ventana Nuevo Aspirante. Si el getRetorno devuelve NULL es porque
                // el usuario cerró la ventana de carga o presionó el botón "Cancelar"
                // CU Registrar inscripción de aspirantes. 
                // 6. muestra los datos del aspirante recién ingresado
                if (retorno != null){ 
                    // Crea el aspirante a partir de los datos cargado. La responsabilidad de creación
                    // es el del controlador    
                    Aspirante aspirante = this.gestor.crearAspirante(retorno[0], //Nombres
                                            retorno[1],//Apellido
                                            retorno[2],//Dirección
                                            retorno[3],//Fecha nacimiento
                                            retorno[4],//Sexo
                                            Integer.parseInt(retorno[5]),//Dni
                                            escuela);
                    this.cargaListaAspiranteDeUnaEscuela(escuela);   
                    // Selecciona en la lista el aspirante recién creado
                    this.lstAspirantes.setSelectedValue(aspirante, true);
                    // Selecciona en la lista de categorías la categoría recomendada para el aspirante
                    this.lstCategorias.setSelectedValue(this.recomiendaCategoriaAspirante(aspirante),true);   
                    
                    // CU Registrar inscripción de aspirantes. 
                    // 6. solicita se informe si desea ingresar otros aspirantes
                    isOtroAspirante = JOptionPane.showConfirmDialog(this, "Desea agregar otro Aspirante?", 
                                      "Nuevo aspirante", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;                            
                }else {
                    isOtroAspirante = false;
                }                
                
            }
            // CU Registrar inscripción de aspirantes. 
            // 8.Para cada aspirante ingresado, solicita se seleccione las competencias a inscribirlo.
            JOptionPane.showMessageDialog(this, "Debe seleccionar la/s competencia/s para cada aspirante","Atención",JOptionPane.INFORMATION_MESSAGE);

        }   catch (Exception e) {
                TorneoLogger.getLogger().log(Level.SEVERE,"Error {0}",e.getMessage());
                JOptionPane.showMessageDialog(this,e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
            }
    }
              
    /**
     * Almacena el tablemodel completo, que contiene la selección de las
     * competencias para un aspirante. Esto es para mantener la selección
     * antes de confirmar la generación de inscripciones.
     * @param anterior
     * @param actual 
     */
    private void actualizaTableModels(Aspirante anterior, Aspirante actual){
        // Elimina la selección anterior
        this.tableModels.remove(anterior);
        // Carga la selección nueva
        this.tableModels.put(anterior, this.tblCompetencias.getModel());
        
        // Recupera el tablemodel para el aspirante
        TableModel tableModel = this.tableModels.get(actual);
        if (tableModel != null){
            this.tblCompetencias.setModel(tableModel);
            // Ajusta el ancho de la columna de selección
            this.tblCompetencias.getColumnModel().getColumn(0).setMaxWidth(50); 
        } else {
            this.cargaTablaCompetencias();
        }        
    }
    /**
     * Actualiza los datos temporales de la ventana de la categoría seleccionada para un Aspirante
     * @param anterior
     * @param actual 
     */
    private void actualizaSeleccionCategoria(Aspirante anterior, Aspirante actual){
        this.categoriaAspirante.remove(anterior);
        this.categoriaAspirante.put(anterior, this.lstCategorias.getSelectedValue());
        
        Categoria categoria = this.categoriaAspirante.get(actual);
        if (categoria != null){
            this.lstCategorias.setSelectedValue(categoria, true);
        } else {
            this.lstCategorias.clearSelection();
        }
    }
    /**
     * Registra las inscripciones 
     * @param escuela 
     */    
    private void registrarInscripciones() throws Exception{
        // Actualiza las selecciones actuales
        this.actualizaTableModels(this.lstAspirantes.getSelectedValue(), this.lstAspirantes.getSelectedValue());
        this.actualizaSeleccionCategoria(this.lstAspirantes.getSelectedValue(), this.lstAspirantes.getSelectedValue());
               
        
        TableModel tableModel = null;
        Aspirante aspirante = null;
        Categoria categoria = null;
        Competencia competencia = null;
        
        if (this.lstAspirantes.getModel().getSize() == 0)
            throw new Exception("Debe ingresar al menos un Aspirante");        
        
        for (int i = 0; i<this.lstAspirantes.getModel().getSize(); i++){
            aspirante = lstAspirantes.getModel().getElementAt(i);
                        
            categoria = this.categoriaAspirante.get(aspirante);
     
            if (categoria == null) 
                throw new Exception("Debe seleccionar una Categoría");
            
            tableModel = this.tableModels.get(aspirante);
            for(int j = 0; j<tableModel.getRowCount(); j++){
                if ((boolean) tableModel.getValueAt(j, 0)){ 
                    // Ingresa si hay la fila de la comepetencia está seleccionada
                    competencia = (Competencia) tableModel.getValueAt(j, 1);
                    this.gestor.registrarInscripcion(new Date(), aspirante, competencia, categoria);
                }
            }            
            if (competencia == null)
                throw new Exception("Debe seleccionar al menos una competencia");
        }        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnNuevoAspirante;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList<Aspirante> lstAspirantes;
    private javax.swing.JList<Categoria> lstCategorias;
    private javax.swing.JList<Escuela> lstEscuelas;
    private javax.swing.JTable tblCompetencias;
    // End of variables declaration//GEN-END:variables
}
